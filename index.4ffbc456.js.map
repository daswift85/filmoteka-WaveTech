{"mappings":"qhBAAAA,EAAA,S,yHCAA,IAAAC,EAAAD,EAAA,S,oDAMAE,EAAAC,QAAKC,WAAWC,iBAAiB,UAAUC,MAAMC,IAC/CA,EAAMC,kBAEN,EAAAC,EAAAC,SAAQ,SAER,MAAMC,EAAcT,EAAAC,QAAKS,YAAYC,MAAMC,OAC3C,GAAoB,KAAhBH,EAUF,OATAI,EAAAd,GAASe,OAAOC,QACd,wDAC8C,CAC5CC,SAAU,gBACVC,QAAS,WAIb,EAAAV,EAAAC,SAAQ,QAK8C,MAelDU,QAAsB,EAAAC,EAAAC,mBAAkBX,EAAa,GAE3D,GAAqC,IAAjCS,EAAcG,QAAQC,OACxBT,EAAAd,GAASe,OAAOS,QACd,8EACA,CACEP,SAAU,gBACVC,QAAS,UAGR,CACLjB,EAAAC,QAAKuB,QAAQC,UAAY,GACzB,MAAMC,GAAe,EAAAC,EAAAC,qBAAoBV,EAAcG,SACvDrB,EAAAC,QAAKuB,QAAQK,mBAAmB,YAAaH,E,EAG/C,EAAAnB,EAAAC,SAAQ,QAERR,EAAAC,QAAKS,YAAYC,MAAQ,EAAE,I,uDC3D7BQ,EAAArB,EAAA,S,0BAKA,MAAMgC,G,cAAe7B,QAAKuB,QAE1BxB,EAAAC,QAAK8B,YAAY5B,iBAAiB,SAASC,eAAgBC,GACzD,KACE,EAAAE,EAAAC,SAAQ,SACR,MAAMwB,QAA6B,EAAAb,EAAAc,oBAEnCH,EAAaL,UAAY,GACzBK,EAAaD,mBACX,aACA,EAAAF,EAAAC,qBAAoBI,EAAqBX,WAE3C,EAAAd,EAAAC,SAAQ,O,CACR,MAAO0B,GACPC,QAAQC,IAAIF,E,KCnBhBf,EAAArB,EAAA,S,0BAKA,MAAMuC,G,cAAepC,QAAKuB,QAE1BxB,EAAAC,QAAKqC,cAAcnC,iBAAiB,SAASC,eAAgBC,GAC3D,KACE,EAAAE,EAAAC,SAAQ,SACR,MAAMwB,QAA6B,EAAAb,EAAAc,kBAAiB,eACpDI,EAAaZ,UAAY,GACzBY,EAAaR,mBACX,aACA,EAAAF,EAAAC,qBAAoBI,EAAqBX,WAE3C,EAAAd,EAAAC,SAAQ,O,CACR,MAAO0B,GACPC,QAAQC,IAAIF,E,KClBhBf,EAAArB,EAAA,S,0BAKA,MAAMyC,G,cAAetC,QAAKuB,QAE1BxB,EAAAC,QAAKuC,WAAWrC,iBAAiB,SAASC,eAAgBC,GACxD,KACE,EAAAE,EAAAC,SAAQ,SACR,MAAMwB,QAA6B,EAAAb,EAAAc,kBAAiB,WAEpDM,EAAad,UAAY,GACzBc,EAAaV,mBACX,aACA,EAAAF,EAAAC,qBAAoBI,EAAqBX,WAE3C,EAAAd,EAAAC,SAAQ,O,CACR,MAAO0B,GACPC,QAAQC,IAAIF,E,KCnBhBf,EAAArB,EAAA,S,0BAKA,MAAM2C,G,cAAexC,QAAKuB,QAE1BxB,EAAAC,QAAKyC,YAAYvC,iBAAiB,SAASC,eAAgBC,GACzD,KACE,EAAAE,EAAAC,SAAQ,SACR,MAAMwB,QAA6B,EAAAb,EAAAc,kBAAiB,YACpDQ,EAAahB,UAAY,GACzBgB,EAAaZ,mBACX,aACA,EAAAF,EAAAC,qBAAoBI,EAAqBX,WAE3C,EAAAd,EAAAC,SAAQ,O,CACR,MAAO0B,GACPC,QAAQC,IAAIF,E","sources":["src/index.js","src/js/searchByKeyword.js","src/js/filter/filterByTopRated.js","src/js/filter/filterByNowPlaying.js","src/js/filter/filterByPopular.js","src/js/filter/filterByUpcoming.js"],"sourcesContent":["import './js/library';\r\nimport './js/genresList';\r\nimport './js/genresListFormat';\r\nimport './js/darktheme.js';\r\nimport './js/movieReleaseYearFormat';\r\nimport './js/api/movieAPI';\r\nimport './js/api/varsAPI';\r\nimport './js/render/render-cards-main-page';\r\nimport './js/render/markup-cards-main-page';\r\nimport './js/refs';\r\nimport './js/components/spinner';\r\nimport './js/team-modal.js';\r\nimport './js/searchByKeyword';\r\nimport './js/filter/filterByWeeklyTrending';\r\nimport './js/render/movie-modal';\r\nimport './js/render/open-and-close-modal';\r\nimport './js/loader';\r\nimport './js/components/pagination2.js';\r\nimport './js/filter/filterByTopRated';\r\nimport './js/filter/filterByNowPlaying';\r\nimport './js/filter/filterByPopular';\r\nimport './js/filter/filterByUpcoming';\r\nimport './js/btnaddtoLocalStorage';\r\nimport './js/components/toTopBottomBtn';\r\n","import Notiflix from 'notiflix';\nimport refs from './refs';\nimport { getMovieByKeyword } from './api/movieAPI';\nimport { createGalleryMarkup } from './render/markup-cards-main-page';\nimport { spinner } from './components/spinner';\n\nrefs.searchForm.addEventListener('submit', async event => {\n  event.preventDefault();\n\n  spinner('start');\n\n  const searchQuery = refs.searchInput.value.trim();\n  if (searchQuery === '') {\n    Notiflix.Notify.failure(\n      'Пожалуйста, введите ключевое слово для поиска фильмов',\n      {\n        position: 'center-center',\n        timeout: 3000,\n      }\n    );\n\n    spinner('stop');\n    return;\n  }\n\n  // Функция для поиска фильмов по ключевому слову и похожим названиям\n  const searchMovies = async query => {\n    const response = await fetch(\n      `https://api.example.com/movies?query=${query}`\n    );\n    const movies = await response.json();\n\n    // Создаем регулярное выражение для поиска похожих названий фильмов\n    const regex = new RegExp(`.*${query.split('').join('.*')}.*`, 'i');\n\n    // Фильтруем полученные результаты по регулярному выражению\n    const similarMovies = movies.filter(movie => regex.test(movie.title));\n\n    return similarMovies;\n  };\n\n  const searchResults = await getMovieByKeyword(searchQuery, 1);\n\n  if (searchResults.results.length === 0) {\n    Notiflix.Notify.warning(\n      'Notyflix: По вашему запросу ничего не найдено. Пожалуйста, повторите поиск.',\n      {\n        position: 'center-center',\n        timeout: 3000,\n      }\n    );\n  } else {\n    refs.gallery.innerHTML = '';\n    const moviesMarkup = createGalleryMarkup(searchResults.results);\n    refs.gallery.insertAdjacentHTML('beforeend', moviesMarkup);\n  }\n\n  spinner('stop');\n\n  refs.searchInput.value = '';\n});\n","import { getTopRatedMovie } from '../api/movieAPI';\nimport { createGalleryMarkup } from '../render/markup-cards-main-page';\nimport { spinner } from '../components/spinner';\nimport refs from '../refs';\n\nconst galleryMovie = refs.gallery;\n\nrefs.topRatedBtn.addEventListener('click', async function (event) {\n  try {\n    spinner('start');\n    const weeklyTrendingMovies = await getTopRatedMovie();\n    // Очищаем текущую разметку галереи перед вставкой новых данных\n    galleryMovie.innerHTML = '';\n    galleryMovie.insertAdjacentHTML(\n      'beforeend',\n      createGalleryMarkup(weeklyTrendingMovies.results)\n    );\n    spinner('stop');\n  } catch (error) {\n    console.log(error);\n  }\n});\n","import { getTopRatedMovie } from '../api/movieAPI';\nimport { createGalleryMarkup } from '../render/markup-cards-main-page';\nimport { spinner } from '../components/spinner';\nimport refs from '../refs';\n\nconst galleryMovie = refs.gallery;\n\nrefs.nowPlayingBtn.addEventListener('click', async function (event) {\n  try {\n    spinner('start');\n    const weeklyTrendingMovies = await getTopRatedMovie('now_playing');\n    galleryMovie.innerHTML = '';\n    galleryMovie.insertAdjacentHTML(\n      'beforeend',\n      createGalleryMarkup(weeklyTrendingMovies.results)\n    );\n    spinner('stop');\n  } catch (error) {\n    console.log(error);\n  }\n});\n","import { getTopRatedMovie } from '../api/movieAPI';\nimport { createGalleryMarkup } from '../render/markup-cards-main-page';\nimport { spinner } from '../components/spinner';\nimport refs from '../refs';\n\nconst galleryMovie = refs.gallery;\n\nrefs.popularBtn.addEventListener('click', async function (event) {\n  try {\n    spinner('start');\n    const weeklyTrendingMovies = await getTopRatedMovie('popular');\n    // Очищаем текущую разметку галереи перед вставкой новых данных\n    galleryMovie.innerHTML = '';\n    galleryMovie.insertAdjacentHTML(\n      'beforeend',\n      createGalleryMarkup(weeklyTrendingMovies.results)\n    );\n    spinner('stop');\n  } catch (error) {\n    console.log(error);\n  }\n});\n","import { getTopRatedMovie } from '../api/movieAPI';\nimport { createGalleryMarkup } from '../render/markup-cards-main-page';\nimport { spinner } from '../components/spinner';\nimport refs from '../refs';\n\nconst galleryMovie = refs.gallery;\n\nrefs.upcomingBtn.addEventListener('click', async function (event) {\n  try {\n    spinner('start');\n    const weeklyTrendingMovies = await getTopRatedMovie('upcoming');\n    galleryMovie.innerHTML = '';\n    galleryMovie.insertAdjacentHTML(\n      'beforeend',\n      createGalleryMarkup(weeklyTrendingMovies.results)\n    );\n    spinner('stop');\n  } catch (error) {\n    console.log(error);\n  }\n});\n"],"names":["parcelRequire","$7Y9D8","$krGWQ","default","searchForm","addEventListener","async","event","preventDefault","$bHKmf","spinner","searchQuery","searchInput","value","trim","$parcel$interopDefault","Notify","failure","position","timeout","searchResults","$k8mky","getMovieByKeyword","results","length","warning","gallery","innerHTML","moviesMarkup","$meWK3","createGalleryMarkup","insertAdjacentHTML","$8b462b49e6d27237$var$galleryMovie","topRatedBtn","weeklyTrendingMovies","getTopRatedMovie","error","console","log","$1ad53f45164eea2d$var$galleryMovie","nowPlayingBtn","$fb06117794e5b974$var$galleryMovie","popularBtn","$12a67ac0930aacbd$var$galleryMovie","upcomingBtn"],"version":3,"file":"index.4ffbc456.js.map"}